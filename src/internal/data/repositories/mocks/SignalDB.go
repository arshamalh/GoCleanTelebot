// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entities "coryptex.com/bot/vip-signal/internal/domain/entities"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SignalDB is an autogenerated mock type for the SignalDB type
type SignalDB struct {
	mock.Mock
}

// Insert provides a mock function with given fields: _a0, _a1
func (_m *SignalDB) Insert(_a0 context.Context, _a1 entities.Signal) (string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, entities.Signal) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entities.Signal) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertMany provides a mock function with given fields: _a0, _a1
func (_m *SignalDB) InsertMany(_a0 context.Context, _a1 []entities.Signal) (string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, []entities.Signal) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []entities.Signal) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
